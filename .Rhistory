if (max(dat.melt$Population >= 1000000)) {
d1$setTemplate( afterScript =
"
<script>
x._getFormat = function () {
return function(d) {
return d3.format(',.1f')(Math.abs(d) / 1000000) + 'm';
};
};
myChart.draw()
</script>
")
} else {
d1$setTemplate( afterScript =
"
<script>
x._getFormat = function () {
return function(d) {
return d3.format(',.0f')(Math.abs(d) / 1000) + 'k';
};
};
myChart.draw()
</script>
")
}
d1
dPyramid('GM', seq(2000, 2050, 10), colors = c('black', 'red'))
dPyramid('GM', c(2000, 2010), colors = c('black', 'red'))
install.packages(c('XML', 'reshape2', 'devtools', 'plyr'))
install.packages(c('XML', 'reshape2', 'devtools', 'plyr'))
install.packages(c("XML", "reshape2", "devtools", "plyr"))
install.packages(c("XML", "reshape2", "devtools", "plyr"))
rm(list=ls())
load("C:\\Users\\Beatriz\\Documents\\UnB 1S2016 2016.04.12\\DEMOGRAFIA\\TRABALHOS FINAIS\\construindo piramides interativas_BR.RData")
library(XML)
library(reshape2)
library(devtools)
library(plyr)
library(rjson)
library(rCharts)
library(shiny)
teste<-function(df, col1, col2, ano ){
Rs<-sum(with(df, col1 == ano))/sum(with(df, col2 == ano))
}
teste(df.teste, pop.m, pop.f, c(1998, 2000))
sum(with(df.teste, pop.m == 1998))
sum(with(df.teste, pop.m == 1998))
teste<-function(df, col1, col2, ano ){
Rs<-sum(with(df, col1 == ano))/sum(with(df, col2 == ano))
Rs
}
teste(df.teste, homens, mulheres, c(1998, 2000))
teste(df.teste, homens, mulheres, c(1998, 2000))
teste(df.teste, "homens", "mulheres", c(1998, 2000))
sum(with(df.teste, homens == 1998))
sum(with(df.teste[,"homens"], ano == 1998))
sum(df.teste[ano == 1998,"homens"])
sum(df.teste["ano" == 1998,"homens"])
with(df.teste[df.teste$ano==1998,], sum(homens))
sum(df.teste[df.teste$ano==1998,"homens"] )
str(df.teste)
df.teste[df.teste$ano==1998,"homens"]
teste(df.teste, "homens", "mulheres", c(1998, 2000))
sum(df.teste["ano" == 1990,"homens"])
aggregate(df.teste, by=ano, mean)
aggregate(df.teste, by="ano", mean)
aggregate(df.teste, by=list(df.teste[,"ano"], mean)
aggregate(df.teste, by=list(df.teste[,"ano"]), mean)
aggregate(df.teste[,"homens"], by=list(df.teste[,"ano"]), mean)
aggregate("media"=df.teste[,"homens"], by=list(df.teste[,"ano"]), mean)
aggregate(media=df.teste[,"homens"], by=list(df.teste[,"ano"]), mean)
aggregate(list(df.teste[,"homens"]), by=list(df.teste[,"ano"]), mean)
aggregate(df.teste[,"homens"], by=list(df.teste[,"ano"]), mean)
help(lapply)
sapply(c(1990,2000,2010,2020,2030), function(x,y){
aggregate(x[,"homens"], by=list(x[,"ano"]), mean)
}, x=df.teste )
sapply(df.teste, function(x,y){
aggregate(x[,"homens"], by=list(x[,"ano"]), mean)
}, x=df.teste )
teste<-function(df,x,y){
res<-aggregate(df[,x], by=list(df[,y]), mean)
res
}
teste(df.teste, x=c("homens", "mulheres"), y=c(1990,2000))
teste(df.teste, x="homens", y=c(1990,2000))
aggregate(df.teste[,c("mulheres","homens"], by=list(df.teste[,"ano"]), mean)
aggregate(df.teste[,c("mulheres","homens")], by=list(df.teste[,"ano"]), mean)
aggregate(df.teste[,c("mulheres","homens")], by=list(df.teste[,"ano"]), median)
aggregate(df.teste[,c("mulheres","homens")], by=list(df.teste[,"ano"]), sum)
df.est<-df.teste
View(dat)
df.est$tot<-with(df.est, homens+mulheres)
View(df.est)
str(somas.pop_ano)
somas.pop_ano<-aggregate(df.teste[,c("mulheres","homens")],
by=list(df.teste[,"ano"]), sum)
str(somas.pop_ano)
somas.pop_ano
somas.pop_ano$Rs<-with(somas.pop_ano, homens/mulheres)
somas.pop_ano
somas.pop_ano$Rs<-with(somas.pop_ano, (homens/mulheres)*100)
somas.pop_ano
library(googleVis)
plot(gvisMotionChart(somas.pop_ano, timevar="Group.1"))
plot(gvisMotionChart(somas.pop_ano,idvar="homens" timevar="Group.1"))
plot(gvisMotionChart(somas.pop_ano,idvar="homens", timevar="Group.1"))
library(plyr)
ddply(df.est, c("idade", "ano"), summarize, media = mean(tot))
somas.pop_ano<-aggregate(list(df.teste[,c("mulheres","homens")]),
by=list(df.teste[,"ano"]), sum )
somas.pop_ano
somas.pop_ano<-aggregate(list(df.teste[,c("mulheres","homens")]),
by=df.teste[,"ano"], sum )
df.est_media<-ddply(df.est, c("idade", "ano"), summarize, media = mean(tot))
df.est_media
sum(df.est[c(1,2,3),"tot"])
ddply(df.est, c("ano"), transform,
Rdep = sum(df.est[c(1,2,3),"tot"]))
aggregate(df.teste[,c("mulheres","homens")],
by=list(df.teste[,"ano"]), sum)
help(split)
split(df.est, df.est$ano)
str(split(df.est, df.est$ano))
help(lapply)
teste<-split(df.est, df.est$ano)
teste
ddply(df.est, c("ano"), transform,
Rdep = sum(c(1,2,3),"tot"]))
ddply(df.est, c("ano"), transform,
Rdep = sum(c(1,2,3))
)
ddply(df.est, c("ano"), transform,
Rdep = function(x) sum(x[c(1,2,3), "tot"]))
teste<-split(df.est, df.est$ano)
teste
sum(teste[[c(1,1:3)]])
sum(teste[[c(1,3)]])
sum(unlist(teste[1:3,"tot"])
sum(unlist(teste[1:3,"tot"]))
c(1:3)
teste[c(1:3),6]
teste
unlist(teste)
teste[[3,c(1:3)]]
teste[[3,1]]
teste[[1,1]]
teste
teste[[1,]]
str(split(df.est, df.est$ano))
str(teste)
teste[[c(3,1)]]
teste[[c(3,c(1,2))]]
teste[[c(3,c(1,1))]]
teste[[c(3,c(1,4))]]
x<-1:4
teste[[c(3,x))]]
teste[[c(3,x)]]
df.1999<-teste[[1]]
df.2000<-teste[[2]]
df.2010<-teste[[3]]
df.2020<-teste[[4]]
df.2030<-teste[[5]]
df.1999
help("assign")
seq_len(5)
for (i in seq_len(5)){
nam <-paste("df", i, sep=".")
nam = teste[[i]]
assign(nam, 1:i)
}
for (i in seq_len(5)){
nam <-paste("df", i, sep=".")
assign(nam, 1:i)
df.i=teste[[i]]
}
teste[[i]]
teste[[1]]
nam <-paste("df", i, sep=".")
nam
assign(nam, 1:i)
df.5=teste[[1]]
seq_along(1990:2030, 10)
seq(1990:2030, 10)
seq_len(1990:2030, 10)
seq_len(1990:2030, by=10)
help(seq)
seq(1990,2030, by=10)
for (i in seq(1990,2030, by=10)){
nam <-paste("df", i, sep=".")
assign(nam, 1:i)
}
nam
teste[j]
for (i in seq(1990,2030, by=10)){
for (j in seq_len(5)){
nam <-paste("df", i, sep=".")
assign(nam, 1:i)
df.[i]<-teste[j]
}
}
for (i in seq(1990,2030, by=10)){
for (j in seq_len(5)){
nam <-paste("df", i, sep=".")
assign(nam, 1:i)
df.i<-teste[j]
}
}
df.1999<-teste[[1]]
df.2000<-teste[[2]]
df.2010<-teste[[3]]
df.2020<-teste[[4]]
df.2030<-teste[[5]]
View(df.2010)
df[c(1:3,31:34),"tot"]
df[c(1:3,31:34),]
df.1999[c(1:3,31:34),]
df.1999[c(1:3,31:34),]
View(df.1999)
df.1999<-data.frame(teste[[1]], stringsAsFactors = F)
View(df.1999)
df.1999<-data.frame(teste[[1]], stringsAsFactors = F, row.names = F)
df.1999<-data.frame(teste[[1]], stringsAsFactors = F, rownames=FALSE)
View(df.1999)
df.1999<-data.frame(teste[[1]], stringsAsFactors = F, row.names = FALSE)
help(data.frame)
df.1999<-data.frame(teste[[1]], stringsAsFactors = F, row.names = NULL)
View(df.1999)
teste
df.1990<-data.frame(teste[[1]], stringsAsFactors = F, row.names = NULL)
df.2000<-data.frame(teste[[2]], stringsAsFactors = F, row.names = NULL)
df.2010<-data.frame(teste[[3]], stringsAsFactors = F, row.names = NULL)
df.2020<-data.frame(teste[[4]], stringsAsFactors = F, row.names = NULL)
df.2030<-data.frame(teste[[5]], stringsAsFactors = F, row.names = NULL)
View(df.2020)
df.1990[c(1:3,31:34),]
df.1990<-teste[[1]]
df.2000<-teste[[2]]
df.2010<-teste[[3]]
df.2020<-teste[[4]]
df.2030<-teste[[5]]
df.1990[c(1:3,14:17),]
sum(df.1990[c(1:3,14:17),]"tot"])
sum(df.1990[c(1:3,14:17),"tot"])
df.1990[-c(1:3,14:17),]
calcula_RD.fun<-function(df){
RS<-sum(df[c(1:3,14:17),"tot"])/sum(df[-c(1:3,14:17),"tot"])
}
calcula_RD.fun(df.1990)
calcula_RD.fun<-function(df){
RS<-sum(df[c(1:3,14:17),"tot"])/sum(df[-c(1:3,14:17),"tot"])
return(RD)
}
calcula_RD.fun(df.1990)
calcula_RD.fun<-function(df){
RD<-sum(df[c(1:3,14:17),"tot"])/sum(df[-c(1:3,14:17),"tot"])
return(RD)
}
calcula_RD.fun(df.1990)
calcula_RD.fun(teste)
calcula_RD.fun(c(df.1990, df.2000))
c(df.1990, df.2000)
calcula_RD.fun<-function(df){
RD<-sum(df[c(1:3,14:17),"tot"])/sum(df[-c(1:3,14:17),"tot"])
return(RD)
}
tab.RD<-data.frame(RD1990 = calcula_RD.fun(df.1990),
RD2000 = calcula_RD.fun(df.2000),
RD2010 = calcula_RD.fun(df.2010),
RD2020 = calcula_RD.fun(df.2020),
RD2030 = calcula_RD.fun(df.2030) )
View(tab.RD)
tab.RD<-data.frame(1990 = calcula_RD.fun(df.1990),
2000 = calcula_RD.fun(df.2000),
2010 = calcula_RD.fun(df.2010),
2020 = calcula_RD.fun(df.2020),
2030 = calcula_RD.fun(df.2030) )
tab.RD<-data.frame('1990' = calcula_RD.fun(df.1990),
'2000' = calcula_RD.fun(df.2000),
'2010' = calcula_RD.fun(df.2010),
'2020' = calcula_RD.fun(df.2020),
'2030' = calcula_RD.fun(df.2030) )
View(tab.RD)
df.est.div<-split(df.est, df.est$ano)
df.est.split<-split(df.est, df.est$ano)
df.est.split<-split(df.est, df.est$ano)
df.1990<-df.est.split[[1]]
df.2000<-df.est.split[[2]]
df.2010<-df.est.split[[3]]
df.2020<-df.est.split[[4]]
df.2030<-df.est.split[[5]]
tab.RD<-data.frame('1990' = calcula_RD.fun(df.1990),
'2000' = calcula_RD.fun(df.2000),
'2010' = calcula_RD.fun(df.2010),
'2020' = calcula_RD.fun(df.2020),
'2030' = calcula_RD.fun(df.2030) )
df.est$Xi<-c(2,7,12,17,22,27,32,37,42,47,52,57,62,67,72,77,87)
View(df.est)
df.est$Xi.fabs = with(df.est, Xi*tot)
ddply(df.est, c("ano"), transform, media=Xi.fabs/5)
ddply(df.est, c("ano"), transform, media=(sum(Xi.fabs))/5)
ddply(df.est, c("ano"), transform,
media=(sum(Xi.fabs))/nrow(df.est))
ddply(df.est, c("ano"), transform,
media=(sum(Xi.fabs))/sum(df.est$tot))
df2.est<-df.est
df2.est$Xi<-c(2,7,12,17,22,27,32,37,42,47,52,57,62,67,72,77,87)
df2.est$Xi.fabs = with(df2.est, Xi*tot)
df2.est.split<-split(df2.est, df2.est$ano)
df2.1990<-df2.est.split[[1]]
df2.2000<-df2.est.split[[2]]
df2.2010<-df2.est.split[[3]]
df2.2020<-df2.est.split[[4]]
df2.2030<-df2.est.split[[5]]
View(df2.2020)
media_classes.fun<-function(df){
media=with(df, (sum(Xi.fabs))/sum(df.est$tot) )
media
}
media_classes.fun(df2.1990)
df2.1990
media_classes.fun(df2.2030)
df.est_media<-ddply(df.est, c("ano"), transform,
media=(sum(Xi.fabs))/sum(df.est$tot))
View(df.est_media)
df3.est<-df.est
df3.est
df3.est.split<-split(df3.est, df3.est$ano)
df3.1990<-df3.est.split[[1]]
df3.2000<-df3.est.split[[2]]
df3.2010<-df3.est.split[[3]]
df3.2020<-df3.est.split[[4]]
df3.2030<-df3.est.split[[5]]
mediana_classes.fun<-function(df){
frel<-df[3,"tot"]/sum(df[,"tot"]) #freq. rel % p linha qquer (no caso 14 anos)
# regra de 3:
x = (0.5*15)/frel
x
}
mediana_classes.fun(df3.2030)
df<-df3.2030
frel<-df[3,"tot"]/sum(df[,"tot"])
GroupedMedian <- function(frequencies, intervals, sep = NULL, trim = NULL) {
# If "sep" is specified, the function will try to create the
#   required "intervals" matrix. "trim" removes any unwanted
#   characters before attempting to convert the ranges to numeric.
if (!is.null(sep)) {
if (is.null(trim)) pattern <- ""
else if (trim == "cut") pattern <- "\\[|\\]|\\(|\\)"
else pattern <- trim
intervals <- sapply(strsplit(gsub(pattern, "", intervals), sep), as.numeric)
}
Midpoints <- rowMeans(intervals)
cf <- cumsum(frequencies)
Midrow <- findInterval(max(cf)/2, cf) + 1
L <- intervals[1, Midrow]      # lower class boundary of median class
h <- diff(intervals[, Midrow]) # size of median class
f <- frequencies[Midrow]       # frequency of median class
cf2 <- cf[Midrow - 1]          # cumulative frequency class before median class
n_2 <- max(cf)/2               # total observations divided by 2
unname(L + (n_2 - cf2)/f * h)
}
GroupedMedian(df3.2030$tot, df3.2030$idade, sep="")
GroupedMedian(df3.2030$tot, df3.2030$idade, sep=" a ")
GroupedMedian(df3.2030$tot, df3.2030$idade, sep=" a ", trim=="cut")
GroupedMedian(df3.2030$tot, df3.2030$idade, sep=" a ", trim="cut")
df<-df3.2030
View(df)
help(cut)
c("0-4","5-9","10-14","15-19","20-24","25-29","30-34","35-39",
"40-44","45-49","50-54","55-59","60-64","65-69","70-74","75-79","80-100")
df$idade<-c("0-4","5-9","10-14","15-19","20-24","25-29","30-34","35-39",
"40-44","45-49","50-54","55-59","60-64","65-69","70-74","75-79","80-100")
GroupedMedian(df$tot, df$idade, sep="-")
df3.1990<-df3.est.split[[1]]
df3.2000<-df3.est.split[[2]]
df3.2010<-df3.est.split[[3]]
df3.2020<-df3.est.split[[4]]
df3.2030<-df3.est.split[[5]]
df3.est$idade<-c("0-4","5-9","10-14","15-19","20-24","25-29","30-34","35-39",
"40-44","45-49","50-54","55-59","60-64","65-69","70-74","75-79","80-100")
df3.est.split<-split(df3.est, df3.est$ano)
df3.1990<-df3.est.split[[1]]
df3.2000<-df3.est.split[[2]]
df3.2010<-df3.est.split[[3]]
df3.2020<-df3.est.split[[4]]
df3.2030<-df3.est.split[[5]]
GroupedMedian(df3.1990$tot, df3.1990$idade, sep="-")
GroupedMedian(df3.2000$tot, df3.2000$idade, sep="-")
GroupedMedian(df3.2010$tot, df3.2010$idade, sep="-")
GroupedMedian(df3.2020$tot, df3.2020$idade, sep="-")
GroupedMedian(df3.2030$tot, df3.2030$idade, sep="-")
??rCharts
??dPlot
win
require(rCharts)
rPlot(tab.RD)
rPlot(tab.RD, y=c(1990,2000,2010,2020,2030), type='l')
rPlot(tab.RD, y=c(1990,2000,2010,2020,2030), data=tab.RD type='l')
rPlot(tab.RD, y=c(1990,2000,2010,2020,2030), data=tab.RD, type='l')
dPlot(tab.RD, y=c(1990,2000,2010,2020,2030), data=tab.RD, type='l')
somas.pop_ano
df.est$RD<-with(df.est, homens/ mulheres)
View(df.est)
df.est
df.est.split<-split(df.est, df.est$ano)
df.1990<-df.est.split[[1]]
plot(gvisMotionChart(df.1990,idvar="ano", timevar="idade"))
plot(gvisMotionChart(df.1990,idvar="idade", timevar="ano"))
plot(gvisMotionChart(df.est,idvar="idade", timevar="ano"))
plot(gvisMotionChart(df.est,idvar="RD", timevar="ano"))
dPlot(RD ~ idade, data = df.est)
rPlot(RD, data = df.est)
View(df.est)
rPlot(RD ~ idade, data = df.1990)
library(XML)
library(reshape2)
library(devtools)
library(plyr)
library(rjson)
library(rCharts)
library(shiny)
rPlot(RD ~ idade, data = df.1990)
save.image("~/UnB 1S2016 2016.04.12/DEMOGRAFIA/TRABALHOS FINAIS/(2)construindo piramides interativas_BR.RData")
plot(RD ~ idade, data = df.1990, type='l')
plot(RD, idade, data = df.1990, type='l')
df.est.split<-split(df.est, df.est$ano)
df.1990<-df.est.split[[1]]
df.2000<-df.est.split[[2]]
df.2010<-df.est.split[[3]]
df.2020<-df.est.split[[4]]
df.2030<-df.est.split[[5]]
rPlot(RD ~ idade, data = df.1990)
plot(dfRD, idade, data = df.1990, type='l')
plot(RD, idade, data = df.1990, type='l')
plot(df.1990$RD, df1990$idade, data = df.1990, type='l')
plot(df.1990$RD, df1990$idade, type='l')
plot(df.1990$RD, df.1990$idade, type='l')
plot(df.est$RD, df.est$idade, type='l')
df.1990
plot(df.est$RD)
plot(df.est$RD, type='l')
plot(df.est$RD,by=df.est$ano type='l')
plot(df.est$RD,by=df.est$ano, type='l')
plot(df.1990$RD, type='l')
barplot(df.1990$RD)
barplot(df.1990$RD ~ df.1990$idade)
barplot(df.1990$idade ~ df.1990$RD)
barplot(df.1990$ord ~ df.1990$RD)
barplot(df.1990$RD, df.1990$ord)
barplot(df.1990$RD, df.1990$ord)
barplot(df.1990$RD, df.1990$idade)
plot(gvisMotionChart(df.est,idvar="RD", timevar="ano"))
plot(gvisMotionChart(df.est,idvar="idade", timevar="ano"))
install.packages("linprog")
help("linprog")
help(linprog)
??linprog)
??linprog
library(linprog)
help(linprog)
help('linprog')
help("linprog")
??linprog
??lpsolve
help("lpSolve")
??lpSolve
load("C:/Users/Beatriz/Desktop/PO1/tabs/tabs_work.RData")
setwd(dir_wd.loc)
library(slidify)
library(slidifyLibraries)
library(shiny)
library(knitr)
slidify("index.Rmd")
#+
runDeck()
slidify("index.Rmd")
#+
runDeck()
slidify("index.Rmd")
#+
runDeck()
slidify("index.Rmd")
#+
runDeck()
slidify("index.Rmd")
#+
runDeck()
slidify("index.Rmd")
#+
runDeck()
slidify("index.Rmd")
#+
runDeck()
slidify("index.Rmd")
#+
runDeck()
slidify("index.Rmd")
#+
runDeck()
slidify("index.Rmd")
#+
runDeck()
slidify("index.Rmd")
#+
runDeck()
slidify("index.Rmd")
#+
runDeck()
slidify("index.Rmd")
#+
runDeck()
